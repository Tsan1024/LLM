// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: streamdemo.proto

package streamdemo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QuestionAnswer_Ask_FullMethodName = "/proto.QuestionAnswer/Ask"
)

// QuestionAnswerClient is the client API for QuestionAnswer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuestionAnswerClient interface {
	Ask(ctx context.Context, opts ...grpc.CallOption) (QuestionAnswer_AskClient, error)
}

type questionAnswerClient struct {
	cc grpc.ClientConnInterface
}

func NewQuestionAnswerClient(cc grpc.ClientConnInterface) QuestionAnswerClient {
	return &questionAnswerClient{cc}
}

func (c *questionAnswerClient) Ask(ctx context.Context, opts ...grpc.CallOption) (QuestionAnswer_AskClient, error) {
	stream, err := c.cc.NewStream(ctx, &QuestionAnswer_ServiceDesc.Streams[0], QuestionAnswer_Ask_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &questionAnswerAskClient{stream}
	return x, nil
}

type QuestionAnswer_AskClient interface {
	Send(*Question) error
	Recv() (*Answer, error)
	grpc.ClientStream
}

type questionAnswerAskClient struct {
	grpc.ClientStream
}

func (x *questionAnswerAskClient) Send(m *Question) error {
	return x.ClientStream.SendMsg(m)
}

func (x *questionAnswerAskClient) Recv() (*Answer, error) {
	m := new(Answer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QuestionAnswerServer is the server API for QuestionAnswer service.
// All implementations must embed UnimplementedQuestionAnswerServer
// for forward compatibility
type QuestionAnswerServer interface {
	Ask(QuestionAnswer_AskServer) error
	mustEmbedUnimplementedQuestionAnswerServer()
}

// UnimplementedQuestionAnswerServer must be embedded to have forward compatible implementations.
type UnimplementedQuestionAnswerServer struct {
}

func (UnimplementedQuestionAnswerServer) Ask(QuestionAnswer_AskServer) error {
	return status.Errorf(codes.Unimplemented, "method Ask not implemented")
}
func (UnimplementedQuestionAnswerServer) mustEmbedUnimplementedQuestionAnswerServer() {}

// UnsafeQuestionAnswerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionAnswerServer will
// result in compilation errors.
type UnsafeQuestionAnswerServer interface {
	mustEmbedUnimplementedQuestionAnswerServer()
}

func RegisterQuestionAnswerServer(s grpc.ServiceRegistrar, srv QuestionAnswerServer) {
	s.RegisterService(&QuestionAnswer_ServiceDesc, srv)
}

func _QuestionAnswer_Ask_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QuestionAnswerServer).Ask(&questionAnswerAskServer{stream})
}

type QuestionAnswer_AskServer interface {
	Send(*Answer) error
	Recv() (*Question, error)
	grpc.ServerStream
}

type questionAnswerAskServer struct {
	grpc.ServerStream
}

func (x *questionAnswerAskServer) Send(m *Answer) error {
	return x.ServerStream.SendMsg(m)
}

func (x *questionAnswerAskServer) Recv() (*Question, error) {
	m := new(Question)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QuestionAnswer_ServiceDesc is the grpc.ServiceDesc for QuestionAnswer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuestionAnswer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.QuestionAnswer",
	HandlerType: (*QuestionAnswerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Ask",
			Handler:       _QuestionAnswer_Ask_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "streamdemo.proto",
}
